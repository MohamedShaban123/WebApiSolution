using Microsoft.EntityFrameworkCore;
using WebApi.Data.Context;
using WebApi.Data.Models;
using WebApi.Models;
using WebApi.Repository.IRepo;

namespace WebApi.Repository.Repositories
{
    public class AssetRepository : IGenericRepository<HrAsset>
    {

        private readonly DexefdbSampleContext _dbContext;

        public AssetRepository(DexefdbSampleContext dbContext)
        {
            _dbContext = dbContext;
        }


        public async Task<IEnumerable<HrAsset>?> GetAllAsync()
        {
            return await _dbContext.HrAssets.ToListAsync();
        }

        public async Task<HrAsset?> GetByIdAsync(int id)
        {
            var asset = await _dbContext.Set<HrAsset>().FindAsync(id);
            return asset;
        }



        public async Task<HrAsset> AddAsync(HrAsset entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity));
            }

            else
            {
                try
                {
                    // reset id (if user enter id by mistake (sql server is generated by sql server))
                    entity.Id = 0;
                    var asset = _dbContext.Set<HrAsset>().Add(entity);
                    await _dbContext.SaveChangesAsync();
                    return asset.Entity;
                }
                catch (Exception ex)
                {
                    throw;
                }
            }

        }





        public async Task<bool> DeleteAsync(int id)
        {
            var asset = await GetByIdAsync(id);
            if (asset == null)
            {
                return false;
            }
            else
            {
                try
                {
                    _dbContext.Set<HrAsset>().Remove(asset);
                    await _dbContext.SaveChangesAsync();
                    return true;
                }
                catch (Exception ex)
                {
                    throw;
                }

            }
        }


        public async Task<bool> UpdateAsync(HrAsset entity)
        {
            var asset = await GetByIdAsync(entity.Id);
            if (asset == null)
            {
                return false;
            }
            else
            {
                try
                {
                    asset.Name = entity.Name;
                    asset.DtAssigned = entity.DtAssigned;
                    asset.DtReturned = entity.DtReturned;
                    asset.Note = entity.Note;
                    asset.BranchId = entity.BranchId;
                    asset.Txt1 = entity.Txt1;
                    asset.Txt2 = entity.Txt2;
                    asset.Txt3 = entity.Txt3;
                    asset.Txt4 = entity.Txt4;
                    asset.Txt5 = entity.Txt5;
                    asset.Txt6 = entity.Txt6;
                    asset.Txt7 = entity.Txt7;
                    asset.Txt8 = entity.Txt8;
                    asset.ModifiedOn = DateTime.UtcNow;
                    await _dbContext.SaveChangesAsync();
                    return true;
                }
                catch (Exception ex)
                {
                    throw;
                }

            }
        }
    }
}
