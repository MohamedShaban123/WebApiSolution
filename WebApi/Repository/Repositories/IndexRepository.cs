using Microsoft.EntityFrameworkCore;
using WebApi.Data.Context;
using WebApi.Models;
using WebApi.Repository.IRepo;

namespace WebApi.Repository.Repo
{
    public class IndexRepository : IGenericRepository<HrIndex>
    {
        private readonly DexefdbSampleContext _dbContext;

        public IndexRepository(DexefdbSampleContext dbContext)
        {
            _dbContext = dbContext;
        }


        public async Task<IEnumerable<HrIndex>?> GetAllAsync()
        {
            return await _dbContext.HrIndices.ToListAsync();
        }

        public async Task<HrIndex?> GetByIdAsync(int id)
        {
          var index = await _dbContext.Set<HrIndex>().FindAsync(id);
          return index;
        }



        public async Task<HrIndex> AddAsync(HrIndex entity)
        {
            if(entity == null)
            {
                throw new ArgumentNullException(nameof(entity));
            }

            else
            {
                try
                {
                    // reset id (if user enter id by mistake (sql server is generated by sql server))
                    entity.Id = 0;
                    var index = _dbContext.Set<HrIndex>().Add(entity);
                    await _dbContext.SaveChangesAsync();
                    return index.Entity;
                }
                catch (Exception ex)
                {
                    throw;
                }
            }                 
        }




        public async Task<bool> DeleteAsync(int id)
        {
            var index = await GetByIdAsync(id);
            if(index == null)
            {
                return false;
            }
            else
            {
                    try
                    {
                        _dbContext.Set<HrIndex>().Remove(index);
                        await _dbContext.SaveChangesAsync();
                        return true;
                    }
                    catch(Exception ex)
                    {
                        throw;
                    }
              
            }
        }

   

        public async Task<bool> UpdateAsync(HrIndex entity)
        {
            var index = await GetByIdAsync(entity.Id);
            if (index == null)
            {
                return false;
            }
            else
            {
                    try

                    {
                        index.ArName = entity.ArName;
                        index.IndexType = entity.IndexType;
                        await _dbContext.SaveChangesAsync();
                        return true;
                    }
                    catch (Exception ex)
                    {
                        throw;
                    }

            }
        }
    }
}
