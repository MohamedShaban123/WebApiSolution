using Microsoft.EntityFrameworkCore;
using WebApi.Data.Context;
using WebApi.Data.Models;
using WebApi.Repository.IRepo;

namespace WebApi.Repository.Repositories
{
    public class BranchRepository : IGenericRepository<CompanyBranch>
    {

        private readonly DexefdbSampleContext _dbContext;

        public BranchRepository(DexefdbSampleContext dbContext)
        {
            _dbContext = dbContext;
        }



        public async Task<IEnumerable<CompanyBranch>?> GetAllAsync()
        {
            return await _dbContext.CompanyBranches.ToListAsync();
        }

        public async Task<CompanyBranch?> GetByIdAsync(int id)
        {
            var branch = await _dbContext.Set<CompanyBranch>().FindAsync(id);
            return branch;
        }


        public async Task<CompanyBranch> AddAsync(CompanyBranch entity)
        {

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity));
            }

            else
            {
                try
                {
                    // reset id (if user enter id by mistake (sql server is generated by sql server))
                    entity.Id = 0;
                    var branch = _dbContext.Set<CompanyBranch>().Add(entity);
                    await _dbContext.SaveChangesAsync();
                    return branch.Entity;
                }
                catch (Exception ex)
                {
                    throw;
                }
            }
        }

        public async Task<bool> DeleteAsync(int id)
        {
            var branch = await GetByIdAsync(id);
            if (branch == null)
            {
                return false;
            }
            else
            {
                try
                {
                    _dbContext.Set<CompanyBranch>().Remove(branch);
                    await _dbContext.SaveChangesAsync();
                    return true;
                }
                catch (Exception ex)
                {
                    throw;
                }

            }
        }

   

        public async Task<bool> UpdateAsync(CompanyBranch entity)
        {
            var branch = await GetByIdAsync(entity.Id);
            if (branch == null)
            {
                return false;
            }
            else
            {
                try

                {
                    // reset id (if user enter id by mistake (sql server is generated by sql server))
                    entity.Id = 0;
                    _dbContext.CompanyBranches.Update(entity);
                    await _dbContext.SaveChangesAsync();
                    return true;
                }
                catch (Exception ex)
                {
                    throw;
                }

            }
        }
    }
}
